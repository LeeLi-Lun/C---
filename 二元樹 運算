// ConsoleApplication1.cpp : 定義主控台應用程式的進入點。
//

#include "stdafx.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
                         
struct treeNode {                                           
   struct treeNode *leftPtr; 
   char data[10];                               
   struct treeNode *rightPtr; 
};                              

typedef struct treeNode TreeNode; 
typedef TreeNode *TreeNodePtr;

void insertNode( TreeNodePtr *treePtr, char *tokenPtr );
void inOrder( TreeNodePtr treePtr );
void preOrder( TreeNodePtr treePtr );
void postOrder( TreeNodePtr treePtr );

int main( void )
{ 
   char sentence[333];
   char *tokenPtr;
   TreeNodePtr rootPtr = NULL; 

   srand( time( NULL ) ); 
   puts( "Enter numbers and they being placed in the tree are:" );

    fgets(sentence, 333 , stdin);
   
   tokenPtr = strtok(sentence, " ");
   
   while(tokenPtr != NULL){
       insertNode( &rootPtr , tokenPtr );
	   tokenPtr = strtok(NULL," "); 
   }
} 

void insertNode( TreeNodePtr *treePtr, char *tokenPtr )
{ 
   if ( *treePtr == NULL ) {   
      *treePtr = (TreeNodePtr) malloc( sizeof( TreeNode ) );

      if ( *treePtr != NULL ) { 
         ( *treePtr )->data = tokenPtr;
         ( *treePtr )->leftPtr = NULL;
         ( *treePtr )->rightPtr = NULL;
      } 
      else {
         printf( "%d not inserted. No memory available.\n", tokenPtr );
      } 
   } 
   else { 
     
      if (tokenPtr < ( *treePtr )->data ) {                   
         insertNode( &( ( *treePtr )->leftPtr ), tokenPtr);   
      }                                         

      else if (tokenPtr > ( *treePtr )->data ) {                 
         insertNode( &( ( *treePtr )->rightPtr ), tokenPtr );     
      }                                     
      else { 
         printf( "%s", "dup" );
      }
   }
} 

void inOrder( TreeNodePtr treePtr )
{ 
  
   if ( treePtr != NULL ) {                
      inOrder( treePtr->leftPtr );         
      printf( "%3d", treePtr->data );      
      inOrder( treePtr->rightPtr );        
   }                           
} 

void preOrder( TreeNodePtr treePtr )
{ 
   if ( treePtr != NULL ) {                
      printf( "%3d", treePtr->data );      
      preOrder( treePtr->leftPtr );        
      preOrder( treePtr->rightPtr );       
   }                          
} 


void postOrder( TreeNodePtr treePtr )
{ 
   
   if ( treePtr != NULL ) {                
      postOrder( treePtr->leftPtr );       
      postOrder( treePtr->rightPtr );      
      printf( "%3d", treePtr->data );      
   }                          
} 
